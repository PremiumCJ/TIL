자료형
숫자형(Number) : 숫자 형태로 이루어진 자료형
문자열(String) : 문자, 단어 등으로 구성된 문자들의 집합을 관리하는 자료형
리스트(list) : 여러개의 자료를 하나의 변수로 관리할 때 사용하는 자료형
튜플(tuple) : 여러개의 자료를 하나의 변수로 관리할 때 사용되는 면에서는 list와 거의 같지만 데이터를 변경할 수 없는 자료형
딕셔너리(dictionary) : 여러개의 자료를 하나의 변수로 관리하는 측면은 list나 tuple과 비슷하지만 key와 value로 이루어져 있고 순차적인 요소값으로 관리되지 않고 key값을 통해 value를 구하는 자료형
집합(set) : 중복이 허용되지 않고, 순서가 없는, 집합에 관련된 것을 쉽게 처리하기 위한 자료형으로 순서가 없기때문에 자료에 접근하기 위해서는 다른 형태의 자료형으로 변환해야 한다.
불(bool) : 참(True)과 거짓(False)을 나타내는 자료형. True와 False만 가질 수 있다.
변수(variable) : 파이썬에서 사용되는 변수는 객체(자료형과 같은 의미)를 가리킨다.

제어문
if문 : if 이후의 조건들로 상황에 맞게 수행시키기 위한 제어문
while문 : 반복해서 문장을 수행해야할 경우 사용되는 반복문
for문 ; while문과 비슷한 반복문이지만 문장 구조의 이해가 용이하다.

프로그램 입/출력
함수(function) : 특정 행위를 필요할 때 반복적으로 수행해야하는 경우 공통된 부분을 하나의 코드로 대변되게 만드는 과정으로 python에서는 def라는 형식으로 시작한다.
매개변수(parameter) : 함수에 입력으로 전달된 값을 받는 변수
인수(argument) : 함수를 호출할 때 전달되는 입력값
람다(lambda) : 함수를 생성할 때 사용되는 예약어로 def와 동일한 역할을 하며 일반적으로 함수를 한줄로 간결하게 만들 때 사용된다.
input : 사용자가 입력한 값을 어떤 변수에 대입하기 위한 역할을 수행한다.
print : 자료형을 출력하는 역할을 수행한다.



기타
클래스(class) : 코드에서 반복되는 역할을 줄이기 위해 공통된 부분을 함수처럼 따로 정리해서 사용하지만 함수와는 다르게 서로 독립적으로 생성이 된다.(이렇게 독립적으로 생성된 부분 객체라고 한다.)
모듈(module) : 함수나 변수 또는 클래스는 모아 놓은 파일
내장 함수(Built-in Function)  : 파이썬에서 기본적으로 제공되는 연산들
라이브러리(library) : 여러가지 용도를 가지고 있는 모듈의 모음





Hello World!

True, False
True == 1
False == 0

til = "Today I Learned"
til. upper()   ->  TODAY I LEARNED
til. lower()   ->. today i learned

[] 을 통해 인덱싱
  ex) til[0]  -> T
      til[1]  -> o

# split을 사용해 address를 공백으로 문자열 분리하고 address_list 라는 변수에 담습니다.
address_list = address.split()
address_list
['서울특별시', '강남구', '역삼동', '강남대로94길', '15', 'S2빌딩', '3층']

# " ".join(리스트) 를 사용하면 리스트를 공백 문자열을 연결할 수 있습니다.
# 리스트로 분리된 문자열을 다시 연결합니다.
# " " 띄워서, "" 다 붙여서, "-" 중간에 대시를 넣어서 가능
# add 
" ".join(address_list)
'서울특별시 강남구 역삼동 강남대로94길 15 S2빌딩 3층'

phone = {'서울' : '02',
         '경기': '031',
         '인천': '032',
         '대전': '042',
         '부산': '051',
         '울산': '052',
         '대구': '053',
         '광주': '062'}
# "서울" 의 값 가져오기
phone["서울"] -> '02'
phone["경기"] -> '031'

# range를 사용하면 for문의 반복수를 지정할 수 있습니다.
for i in range(10):
    print(i)
0
1
2
3
4
5
6
7
8
9

# range 를 사용해 5번 for문을 반복하도록 하고 인덱스 번호가 짝수일 때 소화제 홀수 일 때 해열제를 출력하도록 합니다.
for i in range(5):
    if i % 2 == 0:
        print(i, "소화제")
    else:
        print(i, "해열제")
0 소화제
1 해열제
2 소화제
3 해열제
4 소화제

i = 7
if i % 2 == 0:
    print("짝수")
else:
    print("홀수")
->홀수

# enumerate를 사용하면 인덱스 번호와 원소를 같이 가져올 수 있습니다.
for i, s in enumerate(store):
        print(i, s)
0 서울역점
1 강남점
2 마포점
3 여의도점

# 아래의 문자를 딕셔너리 형태로 변경하기
phone = ">경기 031 >강원 033 >충남 041 >충북 043 >경북 054 >경남 055 >전남 061 >전북 063"
# ">" 문자를 기준으로 문자열을 나눕니다.
# phone_split
phone_dict = {}
for phone_split in phone.split(">"):
    if len(phone_split) > 0:
            key = phone_split.split()[0]
            val = phone_split.split()[1]
            phone_dict[key] = val
{'경기': '031',
'강원': '033',
'충남': '041',
'충북': '043',
'경북': '054',
'경남': '055',
'전남': '061',
'전북': '063'}

#[] 안에 숫자는 0부터 시작
date = "2020.11.01"
date.split(".")[1]
-> '11'
